{"cells":[{"cell_type":"markdown","metadata":{"id":"XceU1d9mCtwH"},"source":["# From SQL to pandas challenge 7"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"GGPFlTHoCtwK","executionInfo":{"status":"ok","timestamp":1684344055629,"user_tz":-120,"elapsed":3350,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}}},"outputs":[],"source":["# import libraries\n","import pandas as pd\n","\n","# load data\n","# This code is made to load our data stored on Google Drive\n","def gd_path(file_id):\n","    \"\"\"Generate a shareable link from Google Drive file id.\"\"\"\n","    return f\"https://drive.google.com/uc?export=download&id={file_id}\"\n","\n","# Google Drive file ids\n","files_id = {\n","    \"titles\": \"1PLdn50N9GRa53ZbuVWo0l47F_IXdvlEm\",\n","    \"sales\": \"1fzFc9rwYmVIPaGOFmhLVxCi3kg19vNU2\", \n","    \"employee\": \"1h9mUjsVqpP74b1w0x7KOw37n_n9Ulkt5\", \n","    \"authors\": \"1fEF89Nhe61EebAljKlwFwfEuokK0o6aJ\"\n","}\n","\n","# Read data from Google Drive\n","authors = pd.read_csv(gd_path(files_id[\"authors\"]), sep=\";\")\n","titles = pd.read_csv(gd_path(files_id[\"titles\"]), sep=\";\")\n","sales = pd.read_csv(gd_path(files_id[\"sales\"]), sep=\";\")\n","employee = pd.read_csv(gd_path(files_id[\"employee\"]), sep=\";\")"]},{"cell_type":"markdown","metadata":{"id":"Vl2GObcaCtwL"},"source":["## 1. Find the total amount of authors for each state"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Gj-HfTLlCtwL","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1684061977361,"user_tz":-120,"elapsed":9,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"7ecbef33-f4fc-4321-9488-b9ad817f0f6f"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-6-1dac92ca9f86>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  authors.groupby('state').sum()\n"]},{"output_type":"execute_result","data":{"text/plain":["           zip  contract\n","state                   \n","CA     1420063        13\n","IN       46403         1\n","KS       66044         0\n","MD       20853         1\n","MI       48105         1\n","OR       97330         1\n","TN       37215         0\n","UT      168304         2"],"text/html":["\n","  <div id=\"df-6d53b8ee-0f05-463d-b256-284d6f707a34\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>zip</th>\n","      <th>contract</th>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>CA</th>\n","      <td>1420063</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>IN</th>\n","      <td>46403</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>KS</th>\n","      <td>66044</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>MD</th>\n","      <td>20853</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>MI</th>\n","      <td>48105</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>OR</th>\n","      <td>97330</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>TN</th>\n","      <td>37215</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>UT</th>\n","      <td>168304</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6d53b8ee-0f05-463d-b256-284d6f707a34')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6d53b8ee-0f05-463d-b256-284d6f707a34 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6d53b8ee-0f05-463d-b256-284d6f707a34');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["authors.groupby('state').sum()"]},{"cell_type":"markdown","metadata":{"id":"w3b-4uZaCtwL"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"2xYHhin7CtwM"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT COUNT(au_id) , state\n","FROM authors\n","group by state;\n","```"]},{"cell_type":"markdown","metadata":{"id":"g0M6PXWRCtwM"},"source":["## 2. Find the total amount of authors by each state and order them in descending order"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"z6ieTOc_CtwN","colab":{"base_uri":"https://localhost:8080/","height":382},"executionInfo":{"status":"ok","timestamp":1684062137010,"user_tz":-120,"elapsed":9,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"05d4d5e3-87be-4638-a503-dc80c9184fcc"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-15-27ea5268392a>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n","  authors.groupby('state').sum().sort_values(by='contract', ascending=False)\n"]},{"output_type":"execute_result","data":{"text/plain":["           zip  contract\n","state                   \n","CA     1420063        13\n","UT      168304         2\n","IN       46403         1\n","MD       20853         1\n","MI       48105         1\n","OR       97330         1\n","KS       66044         0\n","TN       37215         0"],"text/html":["\n","  <div id=\"df-26175499-8d0a-41a6-beef-cc29bc59bb8a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>zip</th>\n","      <th>contract</th>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>CA</th>\n","      <td>1420063</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>UT</th>\n","      <td>168304</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>IN</th>\n","      <td>46403</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>MD</th>\n","      <td>20853</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>MI</th>\n","      <td>48105</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>OR</th>\n","      <td>97330</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>KS</th>\n","      <td>66044</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>TN</th>\n","      <td>37215</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26175499-8d0a-41a6-beef-cc29bc59bb8a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-26175499-8d0a-41a6-beef-cc29bc59bb8a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-26175499-8d0a-41a6-beef-cc29bc59bb8a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}],"source":["authors.groupby('state').sum().sort_values(by='contract', ascending=False)"]},{"cell_type":"markdown","metadata":{"id":"DHFkk50PCtwN"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"8bPalflzCtwN"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT COUNT(au_id) Total,state\n","FROM authors\n","GROUP BY state\n","ORDER BY (total) DESC;\n","```"]},{"cell_type":"markdown","metadata":{"id":"wV_ye4IECtwO"},"source":["## 3. What's the price of the most expensive title from each publisher?"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w441yvkXCtwO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684063098773,"user_tz":-120,"elapsed":7,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"a098b3b3-27a4-4a41-eb38-fc6849b1e272"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pub_id\n","736     19.99\n","877     21.59\n","1389    22.95\n","Name: price, dtype: float64"]},"metadata":{},"execution_count":51}],"source":["titles.groupby('pub_id').price.max()"]},{"cell_type":"markdown","metadata":{"id":"K7CgHw2ECtwO"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"fbSlgKjKCtwO"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT MAX(price), pub_id\n","FROM titles\n","GROUP BY pub_id;\n","```"]},{"cell_type":"markdown","metadata":{"id":"jpRDx0S6CtwO"},"source":["## 4. Find out the top 3 stores with the most sales"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"PxhK2NNZCtwP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684344092177,"user_tz":-120,"elapsed":302,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"7483747a-e60b-46c8-89e8-98f318340f93"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["stor_id\n","7066    75\n","7067    40\n","7896    35\n","Name: qty, dtype: int64"]},"metadata":{},"execution_count":4}],"source":["sales.groupby('stor_id').qty.max().sort_values(ascending=False).head(3)"]},{"cell_type":"markdown","metadata":{"id":"iCjxJfDWCtwP"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"f89f2saHCtwP"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT stor_id, SUM(qty)\n","FROM sales\n","GROUP BY stor_id\n","ORDER BY SUM(qty) DESC\n","LIMIT 3;\n","```"]},{"cell_type":"markdown","metadata":{"id":"uGFYC182CtwP"},"source":["## 5. Find the average job level for each job_id from the employees table.\n","    Order the jobs in ascending order by its average job level."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GTopgRnACtwP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684062985564,"user_tz":-120,"elapsed":7,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"ab99b8d0-91ad-4d5a-b5fb-a204683b7c7c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["job_id\n","2     215.000000\n","3     200.000000\n","4     227.000000\n","5     187.285714\n","6     176.000000\n","7     142.500000\n","8     125.250000\n","9     123.250000\n","10    101.750000\n","11    121.750000\n","12     55.666667\n","13     66.333333\n","14     74.666667\n","Name: job_lvl, dtype: float64"]},"metadata":{},"execution_count":45}],"source":["employee.groupby('job_id').job_lvl.mean()"]},{"cell_type":"markdown","metadata":{"id":"tHIocHh3CtwP"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"IPimaPrICtwP"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT AVG(job_lvl), job_id\n","FROM employee\n","GROUP BY job_id\n","ORDER BY AVG(job_lvl);\n","```"]},{"cell_type":"markdown","metadata":{"id":"HAMx42XfCtwQ"},"source":["## 6. For each type (business, psychology…), find out how many books each publisher has"]},{"cell_type":"code","source":[],"metadata":{"id":"LHVpGmM8_DFa"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5OOUQA1LCtwQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684063182465,"user_tz":-120,"elapsed":2,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"65af0b8d-98b9-4312-a1bb-15caf12d6cde"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["type\n","UNDECIDED       1\n","business        4\n","mod_cook        2\n","popular_comp    3\n","psychology      5\n","trad_cook       3\n","Name: title, dtype: int64"]},"metadata":{},"execution_count":54}],"source":["titles.groupby('type').title.count()"]},{"cell_type":"markdown","metadata":{"id":"Nf3DUeGlCtwQ"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"pPYCjyxWCtwQ"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT pub_id, type, COUNT(title_id)\n","FROM titles\n","GROUP BY pub_id , type;\n","```"]},{"cell_type":"markdown","metadata":{"id":"0xpTiEmACtwQ"},"source":["## 7. Add the average price of each publisher - book type combination from your previous query"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VMLNxdJiCtwQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684063363885,"user_tz":-120,"elapsed":7,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"3785e50e-84c8-475e-cd14-d4b0c902713c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pub_id\n","736      9.784000\n","877     13.208571\n","1389    15.813333\n","Name: price, dtype: float64"]},"metadata":{},"execution_count":60}],"source":["titles.groupby('pub_id').price.mean()"]},{"cell_type":"markdown","metadata":{"id":"ea5KidA4CtwQ"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"6wugQL1OCtwR"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT  AVG(price), COUNT(*), pub_id,type\n","FROM titles\n","GROUP BY pub_id, type;\n","```"]},{"cell_type":"markdown","source":["# BONUS\n","\n","This is part of the section Advanced Pandas."],"metadata":{"id":"4d20YWKMDKGw"}},{"cell_type":"markdown","metadata":{"id":"0-XRxi4pCtwR"},"source":["## 8. From your previous query, keep only the combinations of publisher - book type with an average price higher than 12"]},{"cell_type":"code","source":["titles.groupby('pub_id').price.mean()"],"metadata":{"id":"oESOtOJcvGXl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pub_type = (titles.groupby(by=['type', 'pub_id'])\n","                  .aggregate({'title_id': 'count',\n","                              'price': 'mean'}))\n","pub_type.loc[pub_type['price']>12]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"3UYOYMLjxp4c","executionInfo":{"status":"ok","timestamp":1684344958217,"user_tz":-120,"elapsed":237,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"0996ba74-61a3-4b7b-8a03-247386f635c6"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     title_id      price\n","type         pub_id                     \n","business     1389           3  17.310000\n","popular_comp 1389           3  14.316667\n","psychology   877            1  21.590000\n","trad_cook    877            3  15.963333"],"text/html":["\n","  <div id=\"df-5631b57f-3ec2-4c28-a7d3-74df6def5bf0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>title_id</th>\n","      <th>price</th>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <th>pub_id</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>business</th>\n","      <th>1389</th>\n","      <td>3</td>\n","      <td>17.310000</td>\n","    </tr>\n","    <tr>\n","      <th>popular_comp</th>\n","      <th>1389</th>\n","      <td>3</td>\n","      <td>14.316667</td>\n","    </tr>\n","    <tr>\n","      <th>psychology</th>\n","      <th>877</th>\n","      <td>1</td>\n","      <td>21.590000</td>\n","    </tr>\n","    <tr>\n","      <th>trad_cook</th>\n","      <th>877</th>\n","      <td>3</td>\n","      <td>15.963333</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5631b57f-3ec2-4c28-a7d3-74df6def5bf0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5631b57f-3ec2-4c28-a7d3-74df6def5bf0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5631b57f-3ec2-4c28-a7d3-74df6def5bf0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["the_price = titles.groupby('pub_id').price.mean()\n","the_price\n","titles.loc[the_price > 12, :]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":198},"id":"1dsY2uBjAxgP","executionInfo":{"status":"error","timestamp":1684167714124,"user_tz":-120,"elapsed":6,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"5a6fb908-6c2e-4fb8-b0f8-0cab13400a70"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-7518d5ec07b8>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mthe_price\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtitles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'pub_id'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprice\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mthe_price\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtitles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mthe_price\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m12\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'titles' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"MOi73UzPCtwR"},"source":["### Hint:"]},{"cell_type":"markdown","metadata":{"id":"a6Z38DDaCtwR"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT pub_id,type, COUNT(*)\n","FROM titles\n","GROUP BY pub_id, type\n","HAVING AVG(price) > 12;\n","```"]},{"cell_type":"markdown","metadata":{"id":"SpDJAl20CtwR"},"source":["## 9. Order the results of your previous query by these two criteria:\n","1. Count of books, descendingly\n","2. Average price, descendingly"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hha51jFlCtwR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684132531258,"user_tz":-120,"elapsed":358,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"4b2383dd-21bc-4a9d-9caf-711b1f407314"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["type          pub_id\n","psychology    877       21.590000\n","business      1389      17.310000\n","trad_cook     877       15.963333\n","popular_comp  1389      14.316667\n","mod_cook      877       11.490000\n","psychology    736       11.482500\n","business      736        2.990000\n","UNDECIDED     877        0.000000\n","Name: price, dtype: float64"]},"metadata":{},"execution_count":4}],"source":["titles.groupby(['type', 'pub_id'])['price'].mean().sort_values(ascending=False)"]},{"cell_type":"code","source":["titles.groupby(['type', 'pub_id'])['price'].agg(['mean', 'count']).sort_values(by=['mean', 'count'], ascending=[False, True])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"-nQ0UfdiIETu","executionInfo":{"status":"ok","timestamp":1684133299957,"user_tz":-120,"elapsed":7,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"1934bf9f-93ab-4469-b9b1-0a162f4afba5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          mean  count\n","type         pub_id                  \n","psychology   877     21.590000      1\n","business     1389    17.310000      3\n","trad_cook    877     15.963333      3\n","popular_comp 1389    14.316667      3\n","mod_cook     877     11.490000      2\n","psychology   736     11.482500      4\n","business     736      2.990000      1\n","UNDECIDED    877      0.000000      1"],"text/html":["\n","  <div id=\"df-3585a1a4-f1da-458b-9174-aa4edb93a8aa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>mean</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>type</th>\n","      <th>pub_id</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>psychology</th>\n","      <th>877</th>\n","      <td>21.590000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>business</th>\n","      <th>1389</th>\n","      <td>17.310000</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>trad_cook</th>\n","      <th>877</th>\n","      <td>15.963333</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>popular_comp</th>\n","      <th>1389</th>\n","      <td>14.316667</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>mod_cook</th>\n","      <th>877</th>\n","      <td>11.490000</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>psychology</th>\n","      <th>736</th>\n","      <td>11.482500</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>business</th>\n","      <th>736</th>\n","      <td>2.990000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>UNDECIDED</th>\n","      <th>877</th>\n","      <td>0.000000</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3585a1a4-f1da-458b-9174-aa4edb93a8aa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3585a1a4-f1da-458b-9174-aa4edb93a8aa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3585a1a4-f1da-458b-9174-aa4edb93a8aa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"Fscbv5arCtwS"},"source":["### Hint:"]},{"cell_type":"code","source":["titles.groupby(['type', 'pub_id'])['price'].agg(['mean', 'count']).sort_values(by=['mean', 'count'], ascending=[False, True])['count'].sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E25gfxk6Kt1L","executionInfo":{"status":"ok","timestamp":1684133317052,"user_tz":-120,"elapsed":313,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"15954a47-6e9c-4f94-d925-d7c9c5e0c673"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"lNLFa3RRCtwS"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT  pub_id, type, COUNT(*), AVG(price)\n","FROM titles\n","GROUP BY pub_id, type\n","HAVING AVG(price) > 12\n","ORDER BY COUNT(*) DESC, AVG(price) DESC;\n","```"]},{"cell_type":"markdown","metadata":{"id":"QnwScdzvCtwS"},"source":["## 10. Some authors have a contract, while others don't - it's indicated in the \"contract\" column of the authors table.\n","     \n","    Select all the states and cities where there are 2 or more contracts overall"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BVb7UnbaCtwS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1684133737551,"user_tz":-120,"elapsed":3,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"6d7909b8-234f-4de7-af08-df3f995fdc18"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["state  city          \n","CA     Berkeley          2\n","       Covelo            1\n","       Menlo Park        1\n","       Oakland           4\n","       Palo Alto         2\n","       San Francisco     1\n","       San Jose          1\n","       Vacaville         0\n","       Walnut Creek      1\n","IN     Gary              1\n","KS     Lawrence          0\n","MD     Rockville         1\n","MI     Ann Arbor         1\n","OR     Corvallis         1\n","TN     Nashville         0\n","UT     Salt Lake City    2\n","Name: contract, dtype: int64"]},"metadata":{},"execution_count":13}],"source":["sum_city = authors.groupby(['state', 'city'])['contract'].sum()\n","sum_city"]},{"cell_type":"markdown","metadata":{"id":"qOP_sYlxCtwS"},"source":["### Hint:"]},{"cell_type":"code","source":["sum_city.loc[(sum_city['contract'] >= 2), :]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":494},"id":"3Xqa0tXWMSZj","executionInfo":{"status":"error","timestamp":1684133807312,"user_tz":-120,"elapsed":7,"user":{"displayName":"Valeriia Satsiuk","userId":"02455586528434910686"}},"outputId":"446ac6a8-927e-44e3-9fe6-5ebc43443212"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'contract'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-298c3d53b6a6>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msum_city\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum_city\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'contract'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    979\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    980\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mkey_is_scalar\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 981\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    982\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_hashable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_get_value\u001b[0;34m(self, label, takeable)\u001b[0m\n\u001b[1;32m   1087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1088\u001b[0m         \u001b[0;31m# Similar to Index.get_value, but we do not fall back to positional\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1089\u001b[0;31m         \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1090\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_values_for_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mloc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1091\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method)\u001b[0m\n\u001b[1;32m   2914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2915\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2916\u001b[0;31m             \u001b[0mloc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_level_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2917\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0m_maybe_to_slice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2918\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36m_get_level_indexer\u001b[0;34m(self, key, level, indexer)\u001b[0m\n\u001b[1;32m   3261\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3262\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3263\u001b[0;31m             \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_loc_single_level_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlevel_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3265\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlevel\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lexsort_depth\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/multi.py\u001b[0m in \u001b[0;36m_get_loc_single_level_index\u001b[0;34m(self, level_index, key)\u001b[0m\n\u001b[1;32m   2847\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2848\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2849\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mlevel_index\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2850\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2851\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'contract'"]}]},{"cell_type":"markdown","metadata":{"id":"RccHe_zkCtwS"},"source":["In SQL the syntax is:\n","\n","```sql\n","SELECT SUM(contract),city,state\n","FROM authors\n","GROUP BY state,city\n","HAVING SUM(contract)>1;\n","```"]}],"metadata":{"kernelspec":{"display_name":"base","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.15 (main, Nov  4 2022, 16:35:55) [MSC v.1916 64 bit (AMD64)]"},"orig_nbformat":4,"vscode":{"interpreter":{"hash":"ad2bdc8ecc057115af97d19610ffacc2b4e99fae6737bb82f5d7fb13d2f2c186"}},"colab":{"provenance":[{"file_id":"1XL_2bMXG62TsCgA3qXMGYo3lk434Fgft","timestamp":1684061836955}]}},"nbformat":4,"nbformat_minor":0}